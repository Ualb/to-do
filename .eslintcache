[{"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\index.js":"1","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\reportWebVitals.js":"2","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\App.js":"3","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\getter.js":"4","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\tasks.js":"5","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\login.js":"6","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\dashboard.js":"7"},{"size":267,"mtime":1612325265477,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1608090106356,"results":"10","hashOfConfig":"9"},{"size":1374,"mtime":1613092573143,"results":"11","hashOfConfig":"9"},{"size":2950,"mtime":1612488353682,"results":"12","hashOfConfig":"9"},{"size":3859,"mtime":1612484811707,"results":"13","hashOfConfig":"9"},{"size":10221,"mtime":1613092573219,"results":"14","hashOfConfig":"9"},{"size":578,"mtime":1613092573205,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"r9liz3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\index.js",[],["33","34"],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\reportWebVitals.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\App.js",["35"],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\getter.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\tasks.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\login.js",["36"],"import { useFormik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport { TextInput, Button } from 'react-materialize';\r\nimport * as yup from 'yup';\r\n\r\nimport '../assets/css/main.css';\r\nimport Img from '../assets/img/planner.jpg';\r\n\r\n// librery for the .env\r\nconst dotenv = require('dotenv');\r\ndotenv.config();\r\n\r\nconst Login = (props) => {\r\n\r\n    // is logon or singon?\r\n    const [isSingOn, setIsSingOn] = useState(false);\r\n\r\n    // connect to API\r\n    const axios = require('axios').default;\r\n    // .env workspace variables\r\n    axios.defaults.baseURL = 'https://to-do-back-heroku.herokuapp.com';\r\n\r\n    // for logon form\r\n    const login = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            email: '',\r\n        },\r\n        validationSchema: yup.object({\r\n            email: yup.string().email(\"Correo Electrónico Inválido\").required(\"Correo Requerido\").max(55, \"Máximo 255 caracteres\"),\r\n            password: yup.string().required(\"Contraseña necesaria\").min(5, \"Mínimo 5 caracteres\"),\r\n        }),\r\n        onSubmit: values => {\r\n            if (!isSingOn) {\r\n                axios.get(`/users?filter={\"where\":{\"and\":[{\"email\":\"${values.email}\"},{\"password\":\"${values.password}\"}]}}`)\r\n                    .then((response) => {\r\n                        if (response.status != 200) {\r\n                            alert(\"recurso no encontrado\");\r\n                        } else {\r\n                            const user = response.data;\r\n                            if (user[0] === undefined) {\r\n                                alert(\"recurso no encontrado\");\r\n                            } else {\r\n                                localStorage.setItem('user', JSON.stringify(response.data[0]));\r\n                                props.history.push(\"/dasboard\");\r\n                            }\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    });\r\n\r\n    // for singon form\r\n    const newUser = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            surname: '',\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },\r\n        validationSchema: yup.object({\r\n            firstName: yup.string().required(\"Nombre Requerido\").min(2, \"Mínimo 5 caracteres\").max(25, \"Máximo 25 caracteres\"),\r\n            surname: yup.string().required(\"Apellido Requerido\").min(2, \"Mínimo 5 caracteres\").max(25, \"Máximo 25 caracteres\"),\r\n            email: yup.string().email(\"Correo Inválido\").required(\"Correo Requerido\").max(55, \"Máximo 255 caracteres\"),\r\n            password: yup.string().required(\"Contraseña necesaria\").min(5, \"Mínimo 5 caracteres\"),\r\n            repeatPassword: yup.string().required(\"Repetición necesaria\").min(5, \"Mínimo 5 caracteres\"),\r\n        }),\r\n        onSubmit: values => {\r\n            alert(process.env.API_URL);\r\n            if (isSingOn && values.password === values.repeatPassword) {\r\n                axios.post('/users', {\r\n                    firstName: values.firstName,\r\n                    surname: values.surname,\r\n                    email: values.email,\r\n                    isConfirmEmail: false,\r\n                    password: values.password\r\n                })\r\n                    .then(function (response) {\r\n                        localStorage.setItem('user', JSON.stringify(response.data[0]));\r\n                        props.history.push(\"/dasboard\");\r\n                    })\r\n                    .catch(function (error) {\r\n                        alert(\"error en el servicio, solicite ayuda al distribuidor\")\r\n                    });\r\n            } else {\r\n                alert(\"las contraseñas no coinciden\");\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className='login'>\r\n                <div className='login__img_container'>\r\n                    <img src={Img} alt={\"Imágen de chica ordenando\"} className=\"login__img_container__img_login\" />\r\n                </div>\r\n                {!isSingOn ?\r\n                    <div className='login__input' >\r\n                        <h4>TO-DO</h4>\r\n                        <form onSubmit={login.handleSubmit}>\r\n                            <TextInput\r\n                                email\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                label=\"Correo\"\r\n                                className=\"login__input__email\"\r\n                                onChange={login.handleChange}\r\n                                value={login.values.email}\r\n                            />\r\n                            {login.touched.email && login.errors.email ? (\r\n                                <div className=\"error-input-message\">{login.errors.email}</div>\r\n                            ) : null}\r\n                            <TextInput\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                className=\"login__input__password\"\r\n                                label=\"Contraseña\"\r\n                                password={true}\r\n                                onChange={login.handleChange}\r\n                                value={login.values.password}\r\n                            />\r\n                            {login.touched.password && login.errors.password ? (\r\n                                <div className=\"error-input-message\">{login.errors.password}</div>\r\n                            ) : null}\r\n                            <Button\r\n                                node=\"button\"\r\n                                waves=\"light\"\r\n                                type=\"submit\"\r\n                                className=\"buttom\"\r\n                            >\r\n                                Comenzar\r\n                            </Button>\r\n                        </form>\r\n                        <p onClick={() => setIsSingOn(!isSingOn)}>Aún no tengo cuenta</p>\r\n                    </div>\r\n                    :\r\n                    <div className='login__input' >\r\n                        <h4>TO-DO</h4>\r\n                        <form onSubmit={newUser.handleSubmit}>\r\n                            <TextInput\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                label=\"Primer Nombre\"\r\n                                className=\"login__input__first_Name\"\r\n                                onChange={newUser.handleChange}\r\n                                value={newUser.values.firstName}\r\n                            />\r\n                            {newUser.touched.firstName && newUser.errors.firstName ? (\r\n                                <div className=\"error-input-message\">{newUser.errors.firstName}</div>\r\n                            ) : null}\r\n                            <TextInput\r\n                                id=\"surname\"\r\n                                name=\"surname\"\r\n                                label=\" Primer Apellido\"\r\n                                className=\"login__input__surname\"\r\n                                onChange={newUser.handleChange}\r\n                                value={newUser.values.surname}\r\n                            />\r\n                            {newUser.touched.surname && newUser.errors.surname ? (\r\n                                <div className=\"error-input-message\">{newUser.errors.surname}</div>\r\n                            ) : null}\r\n                            <TextInput\r\n                                email\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                label=\"Correo\"\r\n                                className=\"login__input__email\"\r\n                                validate={true}\r\n                                onChange={newUser.handleChange}\r\n                                value={newUser.values.email}\r\n                            />\r\n                            {newUser.touched.email && newUser.errors.email ? (\r\n                                <div className=\"error-input-message\">{newUser.errors.email}</div>\r\n                            ) : null}\r\n                            <TextInput\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                className=\"login__input__password\"\r\n                                label=\"Contraseña\"\r\n                                password={true}\r\n                                onChange={newUser.handleChange}\r\n                                value={newUser.values.password}\r\n                            />\r\n                            {newUser.touched.password && newUser.errors.password ? (\r\n                                <div className=\"error-input-message\">{newUser.errors.password}</div>\r\n                            ) : null}\r\n                            <TextInput\r\n                                id=\"repeatPassword\"\r\n                                name=\"repeatPassword\"\r\n                                className=\"login__input__password\"\r\n                                label=\"Repetir Contraseña\"\r\n                                password={true}\r\n                                onChange={newUser.handleChange}\r\n                                value={newUser.values.repeatPassword}\r\n                            />\r\n                            {newUser.touched.repeatPassword && newUser.errors.repeatPassword ? (\r\n                                <div className=\"error-input-message\">{newUser.errors.repeatPassword}</div>\r\n                            ) : null}\r\n                            <Button\r\n                                node=\"button\"\r\n                                waves=\"light\"\r\n                                type=\"submit\"\r\n                                className=\"buttom\"\r\n                            >\r\n                                Solicitar\r\n                            </Button>\r\n                        </form>\r\n                        <p onClick={() => setIsSingOn(!isSingOn)}>Aún no tengo cuenta</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\dashboard.js",["37","38","39","40","41"],"\r\nimport { Row, NavItem, Col, Navbar, Container, Icon } from \"react-materialize\";\r\nimport { Redirect } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\n\r\nconst DashBoard = () => {\r\n    return (\r\n        <>\r\n            {!localStorage.getItem('user') ?\r\n                <Redirect to=\"/\" />\r\n                :\r\n                <>\r\n                    <div>\r\n                        <Icon>\r\n                            person\r\n                        </Icon>\r\n                    </div>\r\n                </>\r\n            }\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DashBoard;",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":30,"column":3,"nodeType":"48","messageId":"49","endLine":31,"endColumn":112},{"ruleId":"50","severity":1,"message":"51","line":37,"column":45,"nodeType":"52","messageId":"53","endLine":37,"endColumn":47},{"ruleId":"54","severity":1,"message":"55","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":13},{"ruleId":"54","severity":1,"message":"58","line":2,"column":15,"nodeType":"56","messageId":"57","endLine":2,"endColumn":22},{"ruleId":"54","severity":1,"message":"59","line":2,"column":24,"nodeType":"56","messageId":"57","endLine":2,"endColumn":27},{"ruleId":"54","severity":1,"message":"60","line":2,"column":29,"nodeType":"56","messageId":"57","endLine":2,"endColumn":35},{"ruleId":"54","severity":1,"message":"61","line":2,"column":37,"nodeType":"56","messageId":"57","endLine":2,"endColumn":46},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'NavItem' is defined but never used.","'Col' is defined but never used.","'Navbar' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]