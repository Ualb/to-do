[{"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\index.js":"1","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\reportWebVitals.js":"2","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\App.js":"3","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\getter.js":"4","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\tasks.js":"5","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\login.js":"6","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\dashboard.js":"7","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\error404.js":"8"},{"size":267,"mtime":1612325265477,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1608090106356,"results":"11","hashOfConfig":"10"},{"size":515,"mtime":1613150969629,"results":"12","hashOfConfig":"10"},{"size":2950,"mtime":1612488353682,"results":"13","hashOfConfig":"10"},{"size":3859,"mtime":1612484811707,"results":"14","hashOfConfig":"10"},{"size":11083,"mtime":1613151354843,"results":"15","hashOfConfig":"10"},{"size":17133,"mtime":1613149096643,"results":"16","hashOfConfig":"10"},{"size":488,"mtime":1613151262502,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"r9liz3",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\index.js",[],["36","37"],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\reportWebVitals.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\App.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\getter.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\tasks.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\login.js",[],"C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\dashboard.js",["38"],"import React from 'react';\r\nimport { Row, Col, Container, Icon, TextInput, Chip, Collection, CollectionItem, Button, Modal, TimePicker, Switch } from \"react-materialize\";\r\nimport { Redirect } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport '../assets/css/main.css';\r\n\r\n\r\n// for the animations alerts\r\nimport swal from 'sweetalert';\r\n\r\n// connect to API\r\nconst axios = require('axios').default;\r\n// .env workspace variables\r\naxios.defaults.baseURL = 'https://to-do-back-heroku.herokuapp.com';\r\n\r\n\r\n\r\n// the lists for the user\r\nconst lists = () => {\r\n    var listsName = [];\r\n    const email = JSON.parse(localStorage.getItem('user')).email;\r\n    axios.get(`lists?filter[where][emailUser]=${email}`)\r\n        .then((response) => {\r\n            if (response.status !== 200) {\r\n                swal(\"Ha ocurrido un fallo, contáctate con el proveedor!\");\r\n            } else {\r\n                toast.info(\"Todo bien!\");\r\n                localStorage.setItem('lists', JSON.stringify(response.data));\r\n                let i = 0;\r\n                while (true) {\r\n                    try {\r\n                        listsName.push(JSON.parse(localStorage.getItem(\"lists\"))[i]['title']);\r\n                        localStorage.setItem('todo', listsName);\r\n                        ++i;\r\n                    } catch (e) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n}\r\n\r\n\r\nconst getDateTime = (values) => {\r\n    let date = new Date();\r\n    const month = date.getMonth();\r\n    let realMonth = '';\r\n    if (month < 10) {\r\n        realMonth = `0${month}`\r\n    } else {\r\n        realMonth = month;\r\n    }\r\n    const day = date.getDay();\r\n    let realDay = '';\r\n    if (day < 10) {\r\n        realDay = `0${day}`\r\n    } else {\r\n        realDay = day;\r\n    }\r\n    const minutes = date.getMinutes()\r\n    let realMin = '';\r\n    if (minutes < 10) {\r\n        realMin = `0${minutes}`\r\n    } else {\r\n        realMin = minutes;\r\n    }\r\n    const hours = date.getHours();\r\n    let realHrs = '';\r\n    if (hours < 10) {\r\n        realHrs = `0${hours}`\r\n    } else {\r\n        realHrs = hours;\r\n    }\r\n    const result = `${date.getFullYear()}-${realMonth}-${realDay}T${realHrs}:${realMin}:${date.getSeconds()}.${date.getMilliseconds()}Z`;\r\n    return result;\r\n}\r\n\r\n\r\n// the list component\r\nconst List = (props) => {\r\n\r\n    const handleClickList = (element) => {\r\n        axios.get(`/lists?filter={\"where\":{\"and\":[{\"emailUser\":\"${JSON.parse(localStorage.getItem('user')).email}\"},{\"title\":\"${element}\"}]}}`).then((response) => {\r\n            props.setState({\r\n                tasks: response.data[0].tasks,\r\n                element: element\r\n            });\r\n        }).catch(function (error) {\r\n            alert(error)\r\n        });\r\n    }\r\n\r\n    // for create new list\r\n    const newList = useFormik({\r\n        initialValues: {\r\n            title: '',\r\n        },\r\n        validationSchema: yup.object({\r\n            title: yup.string().required(\"Descripción necesaria\").min(3, \"Mínimo 3 caracteres\").max(55, \"Máximo 55 caracteres\"),\r\n        }),\r\n        onSubmit: values => {\r\n            axios.post('/lists', {\r\n                emailUser: JSON.parse(localStorage.getItem('user')).email,\r\n                title: values.title,\r\n                isComplete: false,\r\n                creationDate: getDateTime()\r\n            })\r\n                .then(function (response) {\r\n                    swal(\"Ya tienes una nueva lista!\");\r\n                })\r\n                .catch(function (error) {\r\n                    swal(\"Algo ha ocurrido, comuniquese con su distribuidor\");\r\n                });\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Fragment className=\"scrolling\">\r\n            <div className=\"scrolling__container_1\">\r\n                <div className=\"scrolling__container__title\">\r\n                    <h5>Listas</h5>\r\n                    <Modal\r\n                        actions={[\r\n                            <Button flat modal=\"close\" node=\"button\" waves=\"green\">Cerrar</Button>\r\n                        ]}\r\n                        bottomSheet={false}\r\n                        fixedFooter={false}\r\n                        header=\"Ingrese una lista de tareas\"\r\n                        id=\"Modal-0\"\r\n                        open={false}\r\n                        options={{\r\n                            dismissible: true,\r\n                            endingTop: '10%',\r\n                            inDuration: 250,\r\n                            onCloseEnd: null,\r\n                            onCloseStart: null,\r\n                            onOpenEnd: null,\r\n                            onOpenStart: null,\r\n                            opacity: 0.5,\r\n                            outDuration: 250,\r\n                            preventScrolling: true,\r\n                            startingTop: '4%'\r\n                        }}\r\n                        trigger={\r\n                            <button className=\"custom-button\">+</button>}\r\n                    >\r\n                        <form onSubmit={newList.handleSubmit}>\r\n                            <TextInput\r\n                                id=\"title\"\r\n                                name=\"title\"\r\n                                label=\"Título de la lista\"\r\n                                onChange={newList.handleChange}\r\n                                value={newList.values.title}\r\n                            />\r\n                            {newList.touched.title && newList.errors.title ? (\r\n                                <div className=\"error-input-message\">{newList.errors.title}</div>\r\n                            ) : null}\r\n                            <Button\r\n                                node=\"button\"\r\n                                waves=\"light\"\r\n                                type=\"submit\"\r\n                                className=\"apply\"\r\n                            >\r\n                                Aplicar\r\n                            </Button>\r\n                        </form>\r\n                    </Modal>\r\n                </div>\r\n                <Collection className=\"collection\">\r\n                    {localStorage.getItem(\"todo\") && localStorage.getItem(\"todo\").split(',').map(function (element, i) {\r\n                        return (\r\n                            <CollectionItem key={i} onClick={() => handleClickList(element)} className=\"lists\">\r\n                                <p>{element}</p>\r\n                            </CollectionItem>\r\n                        );\r\n                    })}\r\n                </Collection>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n// the task component\r\nconst Task = (props) => {\r\n\r\n    const { tasks } = props;\r\n\r\n    // for create new task\r\n    const newTask = useFormik({\r\n        initialValues: {\r\n            description: '',\r\n            remember: false,\r\n        },\r\n        validationSchema: yup.object({\r\n            description: yup.string().required(\"Descripción necesaria\").min(3, \"Mínimo 3 caracteres\").max(55, \"Máximo 55 caracteres\"),\r\n            remember: yup.boolean(),\r\n        }),\r\n        onSubmit: values => {\r\n            axios.post('/', {\r\n                id: '',\r\n                description: values.description,\r\n                hourFinish: '',\r\n                remember: false\r\n            })\r\n                .then(function (response) {\r\n                    localStorage.setItem('user', JSON.stringify(response.data[0]));\r\n                })\r\n                .catch(function (error) {\r\n                    swal(\"Ha ocurrido un fallo, contáctate con el proveedor!\");\r\n                });\r\n        }\r\n    })\r\n\r\n    const taskModific = (element) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment className=\"scrolling\">\r\n            <div className=\"scrolling__container\">\r\n                <div className=\"scrolling__container__title\">\r\n                    <h5>Tareas</h5>\r\n                    <Modal\r\n                        actions={[\r\n                            <Button flat modal=\"close\" node=\"button\" waves=\"green\">Cerrar</Button>\r\n                        ]}\r\n                        bottomSheet={false}\r\n                        fixedFooter={false}\r\n                        header=\"Agregue algo nuevo por hacer\"\r\n                        id=\"Modal-0\"\r\n                        open={false}\r\n                        options={{\r\n                            dismissible: true,\r\n                            endingTop: '10%',\r\n                            inDuration: 250,\r\n                            onCloseEnd: null,\r\n                            onCloseStart: null,\r\n                            onOpenEnd: null,\r\n                            onOpenStart: null,\r\n                            opacity: 0.5,\r\n                            outDuration: 250,\r\n                            preventScrolling: true,\r\n                            startingTop: '4%'\r\n                        }}\r\n                        trigger={\r\n                            <button className=\"custom-button\">+</button>}\r\n                    >\r\n                        <form onSubmit={newTask.handleSubmit}>\r\n                            <TextInput\r\n                                id=\"description\"\r\n                                name=\"description\"\r\n                                label=\"Breve descripción\"\r\n                                onChange={newTask.handleChange}\r\n                                value={newTask.values.description}\r\n                            />\r\n                            {newTask.touched.description && newTask.errors.description ? (\r\n                                <div className=\"error-input-message\">{newTask.errors.description}</div>\r\n                            ) : null}\r\n                            <TimePicker\r\n                                options={{\r\n                                    autoClose: false,\r\n                                    container: null,\r\n                                    defaultTime: 'now',\r\n                                    duration: 350,\r\n                                    fromNow: 0,\r\n                                    i18n: {\r\n                                        cancel: 'Cancel',\r\n                                        clear: 'Clear',\r\n                                        done: 'Ok'\r\n                                    },\r\n                                    onCloseEnd: null,\r\n                                    onCloseStart: null,\r\n                                    onOpenEnd: null,\r\n                                    onOpenStart: null,\r\n                                    onSelect: null,\r\n                                    showClearBtn: false,\r\n                                    twelveHour: true,\r\n                                    vibrate: true\r\n                                }}\r\n                                id=\"hourFinish\"\r\n                                name=\"hourFinish\"\r\n                                label=\"Hora planeado a realizar\"\r\n                            />\r\n                            <Switch\r\n                                id=\"Switch-11\"\r\n                                offLabel=\"Recordar\"\r\n                                id=\"remember\"\r\n                                name=\"remember\"\r\n                                onChange={newTask.handleChange}\r\n                                value={newTask.values.remember}\r\n                            />\r\n                            {newTask.touched.remember && newTask.errors.remember ? (\r\n                                <div className=\"error-input-message\">{newTask.errors.remember}</div>\r\n                            ) : null}\r\n                            <Button\r\n                                node=\"button\"\r\n                                waves=\"light\"\r\n                                type=\"submit\"\r\n                                className=\"apply\"\r\n                            >\r\n                                Aplicar\r\n                            </Button>\r\n                        </form>\r\n                    </Modal>\r\n                </div>\r\n                <Collection className=\"collection\">\r\n                    {tasks && tasks.map(function (element, i) {\r\n                        return (\r\n                            <CollectionItem key={i} className=\"task\" onClick={taskModific(element)} >\r\n                                <p>{element.description}</p>\r\n                            </CollectionItem>\r\n                        );\r\n                    })}\r\n                </Collection>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n// the filter component\r\nconst Filter = () => {\r\n    return (\r\n        <Fragment className=\"scrolling\">\r\n            <div className=\"scrolling__container_3\">\r\n                <div className=\"scrolling__container__title\"><h5>Filtrar Por</h5></div>\r\n                <div className=\"title-filter\">\r\n                    <TextInput\r\n                        id=\"TextInput-4\"\r\n                        label=\"Título\"\r\n                    />\r\n                </div>\r\n                <div className=\"tag-filter\">\r\n                    <Chip\r\n                        close={false}\r\n                        options={null}\r\n                        className=\"chip\"\r\n                    >\r\n                        familia\r\n                    </Chip>\r\n                    <Chip\r\n                        close={false}\r\n                        options={null}\r\n                        className=\"chip\"\r\n                    >\r\n                        restaurante\r\n                    </Chip>\r\n                    <Chip\r\n                        close={false}\r\n                        options={null}\r\n                        className=\"chip\"\r\n                    >\r\n                        viaje\r\n                    </Chip>\r\n                    <Chip\r\n                        close={false}\r\n                        options={null}\r\n                        className=\"chip\"\r\n                    >\r\n                        compras\r\n                    </Chip>\r\n                    <Chip\r\n                        close={false}\r\n                        options={null}\r\n                        className=\"chip\"\r\n                    >\r\n                        gym\r\n                    </Chip>\r\n                    <Chip\r\n                        close={false}\r\n                        options={null}\r\n                        className=\"chip\"\r\n                    >\r\n                        aprendizajes\r\n                    </Chip>\r\n                </div>\r\n                <div className=\"state-filter\">\r\n                    <p>Estado</p>\r\n                    <button className=\"custom-button\">Hecho</button>\r\n                    <button className=\"custom-button\">Pendiente</button>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst toCapitalLetter = (value) => value.charAt(0).toUpperCase() + value.slice(1);\r\nconst getUserBasicInfo = () => {\r\n    return toCapitalLetter(JSON.parse(localStorage.getItem('user')).firstName) + ' ' +\r\n        toCapitalLetter(JSON.parse(localStorage.getItem('user')).surname);\r\n}\r\n\r\n\r\nclass DashBoard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { lists: [], tasks: [], element: '' }\r\n        this.closeSession = this.closeSession.bind(this);\r\n        this.setState = this.setState.bind(this);\r\n    }\r\n\r\n    closeSession = () => {\r\n        localStorage.clear();\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    componentWillMount() {\r\n        lists();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!localStorage.getItem('user') ?\r\n                    <Redirect to=\"/\" />\r\n                    :\r\n                    <Container>\r\n                        <Row>\r\n                            <Col className=\"header\" s={12}>\r\n                                <Icon onClick={this.closeSession}>\r\n                                    expand_more\r\n                            </Icon>\r\n                                <Icon>\r\n                                    person\r\n                            </Icon>\r\n                                <p>{getUserBasicInfo()}</p>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"dashboard-content\">\r\n                            <List setState={this.setState} list={this.state.lists} />\r\n                            <Task tasks={this.state.tasks} />\r\n                            <Filter />\r\n                        </Row>\r\n                    </Container>\r\n                }\r\n                <ToastContainer\r\n                    position=\"bottom-right\"\r\n                    autoClose={5000}\r\n                    hideProgressBar={true}\r\n                    newestOnTop={false}\r\n                    closeOnClick\r\n                    rtl={false}\r\n                    pauseOnFocusLoss\r\n                    draggable\r\n                    pauseOnHover />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","C:\\Users\\ualb\\Documents\\git\\polpo\\to-do\\src\\elements\\error404.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":292,"column":33,"nodeType":"45","endLine":292,"endColumn":46},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]